#!/usr/bin/python3
# -*- coding: utf-8 -*-
import os
import sys
import subprocess

PATH_REQUIREMENTS = "%s/requirements" % (os.environ.get("RESOURCES"))


def read_requirements(filepath):
    """Get a list of requirements from the given file."""
    requirements = []
    try:
        with open(filepath, "r") as fh:
            for line in fh:
                line = line.strip()
                if not line or line.startswith("#"):
                    continue
                requirements += line.split()
    except IOError:
        # No requirements file
        pass
    return requirements


def install_apt(packages):
    if packages:
        subprocess.check_call(
            [
                "apt-get",
                "install",
                "-y",
                "--no-install-recommends",
                "-o",
                "Dpkg::Options::=--force-confdef",
                "-o",
                "Dpkg::Options::=--force-confold",
            ]
            + packages
        )


def install_pip(packages):
    if packages:
        subprocess.check_call(
            [
                "pip",
                "install",
                "--no-cache-dir",
                "-r",
                "%s/pip.txt" % PATH_REQUIREMENTS,
            ]
        )


def cleanup(packages):
    if packages:
        subprocess.check_call(["apt-get", "purge", "-y"] + packages)
        subprocess.check_call(["apt-get", "autoremove", "-y"])
        subprocess.check_call(["rm", "-rf", "/var/lib/apt/lists/*", "/tmp/*"])


# Read requirements
# TODO: Analyze if the requirements are already installed, and avoid
# this whole step if so. That could help optimizing nested builds.
build_deps = read_requirements("%s/build_deps.txt" % PATH_REQUIREMENTS)
apt = read_requirements("%s/apt.txt" % PATH_REQUIREMENTS)
pip = read_requirements("%s/pip.txt" % PATH_REQUIREMENTS)

# Install build dependencies, if any
if apt or build_deps:
    subprocess.check_call(["apt-get", "update", "-y"])
if pip:
    install_apt(build_deps)
install_apt(apt)
install_pip(pip)

# Cleanup
cleanup(build_deps)

# Remove all requirements files, to allow nested builds without reinstalling
subprocess.check_call(["rm", "-f", "%s/*.txt" % PATH_REQUIREMENTS])
